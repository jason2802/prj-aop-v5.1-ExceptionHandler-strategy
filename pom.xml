<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example.aop</groupId>
	<artifactId>prj-aop-v5.1-ExceptionHandler-strategy</artifactId>
	<version>1.0.1</version>
	<packaging>jar</packaging>

	<name>prj-aop-v5.1-ExceptionHandler-strategy</name>
	<description>Rest API - How to use AOP to :
		1- Log entries and exit to and from method
		2- Authenticated user credential

LOGS : How to use SLF4J to :
            1- send log to console o file appender
		3- GOAL : Generated jar and load in my common maven repository - Apache Archiva
	</description>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>


		<generated.code.java.folder.suffix>src/gen/java</generated.code.java.folder.suffix>
		<generated.code.root.folder>${basedir}/generated-sources</generated.code.root.folder>


		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>


		<!-- <aspectj.maven.plugin.version>1.10</aspectj.maven.plugin.version> -->
		<build.helper.maven.plugin.version>3.0.0</build.helper.maven.plugin.version>
		<gmavenplus.plugin.version>1.6</gmavenplus.plugin.version>
		<jacoco.maven.plugin.version>0.8.1</jacoco.maven.plugin.version>
		<jaxb2.maven.plugin.version>2.4</jaxb2.maven.plugin.version>
		<gitflow.maven.plugin.version>1.10.0</gitflow.maven.plugin.version>
		<maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
		<maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
		<maven.jar.plugin.version>3.1.0</maven.jar.plugin.version>
		<maven.javadoc.plugin.version>2.10.4</maven.javadoc.plugin.version>
		<maven.release.plugin.version>2.5</maven.release.plugin.version>
		<maven.source.plugin.version>2.2.1</maven.source.plugin.version>
		<maven.surefire.plugin.version>2.19.1</maven.surefire.plugin.version>
		<spring.boot.maven.plugin.version>1.5.14.RELEASE</spring.boot.maven.plugin.version> <!-- Due to maven limitation this property cannot be inherited through import of mtt-services-parent-bom  -->
		<swagger-codegen-maven-plugin.version>2.3.1</swagger-codegen-maven-plugin.version>

		<aspectj.version>1.8.13</aspectj.version>
		<junit.platform.surefire.provider.version>1.1.0</junit.platform.surefire.provider.version>
		<!-- <junit.version>5.0.1</junit.version> -->
		<maven.scm.provider.gitexe.version>1.9.1</maven.scm.provider.gitexe.version>

	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>		
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Logback is provided out of the box with Spring Boot when you use one of the Spring Boot starter dependencies 
		as they include spring-boot-starter-logging providing logging without any configuration and can be altered 
		to work differently if required.
		
		-->

		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
		
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>javax.mail</artifactId>
			<version>1.6.2</version>
		</dependency>
	
		<!-- 
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
				<scope>runtime</scope>
			</dependency>
		-->
		<dependency>
		    <groupId>javax.inject</groupId>
		    <artifactId>javax.inject</artifactId>
		    <version>1</version>
		</dependency>
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring.boot.maven.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<additionalProperties>
								<encoding.source>${project.build.sourceEncoding}</encoding.source>
								<encoding.reporting>${project.reporting.outputEncoding}</encoding.reporting>
								<java.source>${maven.compiler.source}</java.source>
								<java.target>${maven.compiler.target}</java.target>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven.jar.plugin.version}</version>
				<configuration>
					<excludes>
						<exclude>bootstrap*.yml</exclude>
						<exclude>bootstrap*.yaml</exclude>
						<exclude>mt*.yml</exclude>
						<exclude>mt*.yaml</exclude>
					</excludes>
					<archive>
						<manifest>
							<!-- Adds version number to the MANIFEST file -->
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>



			<!-- We use the Jacoco plugin to feed sonar with test coverage information  -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.maven.plugin.version}</version>
				<executions>
					<execution>
						<id>jacoco-initialize</id>
						<phase>initialize</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		<!--
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>${aspectj.maven.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjtools</artifactId>
						<version>${aspectj.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<showWeaveInfo>true</showWeaveInfo>
					<complianceLevel>${java.version}</complianceLevel>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>test-compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		-->


			<plugin>
				<groupId>com.amashchenko.maven.plugin</groupId>
				<artifactId>gitflow-maven-plugin</artifactId>
				<version>${gitflow.maven.plugin.version}</version>
				<configuration>
					<commitMessages>
						<releaseStartMessage>[Gitflow] Service - update versions for release</releaseStartMessage>
						<releaseFinishMessage>[Gitflow] Service - update development version</releaseFinishMessage>
					</commitMessages>
					<gitFlowConfig>
						<developmentBranch>develop</developmentBranch>
						<productionBranch>master</productionBranch>
						<versionTagPrefix>${project.artifactId}-</versionTagPrefix>
					</gitFlowConfig>
				</configuration>
			</plugin>



			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven.release.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-gitexe</artifactId>
						<version>${maven.scm.provider.gitexe.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven.deploy.plugin.version}</version>
				<executions>
					<execution>
						<id>default-deploy</id>
						<phase>deploy</phase>
						<goals>
							<goal>deploy</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven.source.plugin.version}</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>



			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven.javadoc.plugin.version}</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>



			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven.clean.plugin.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${generated.code.root.folder}</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

		</plugins>
	</build>


	<!-- Instruction:
	         deployment to a repository is configured in the pom.xml
	         for the respective project in the distributionManagement section
	 -->
	<distributionManagement>
		<repository>
			<id>local.josuefako.repo.id</id>
			<url>http://localhost:8989/repository/local.josuefako.repo.id/</url>
		</repository>
		<snapshotRepository>
			<id>local.josuefako.repo.id</id>
			<url>http://localhost:8989/repository/local.josuefako.repo.id/</url>
		</snapshotRepository>

	</distributionManagement>
	<!-- Instruction:
             The credentials used for the deployment are found in the <server>
              section of your setting.xml
     -->

</project>
